// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetProductBySKU(ctx context.Context, in *GetProductBySKURequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	GetAllProducts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	AddProductQuantity(ctx context.Context, in *AddProductQuantityRequest, opts ...grpc.CallOption) (*AddProductQuantityResponse, error)
	UpdateProductPrice(ctx context.Context, in *UpdateProductPriceRequest, opts ...grpc.CallOption) (*UpdateProductPriceResponse, error)
	CheckoutProduct(ctx context.Context, in *CheckoutProductRequest, opts ...grpc.CallOption) (*CheckoutProductResponse, error)
	ReturnProduct(ctx context.Context, in *ReturnProductRequest, opts ...grpc.CallOption) (*ReturnProductResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetProductBySKU(ctx context.Context, in *GetProductBySKURequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/GetProductBySKU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetAllProducts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/GetAllProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) AddProductQuantity(ctx context.Context, in *AddProductQuantityRequest, opts ...grpc.CallOption) (*AddProductQuantityResponse, error) {
	out := new(AddProductQuantityResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/AddProductQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateProductPrice(ctx context.Context, in *UpdateProductPriceRequest, opts ...grpc.CallOption) (*UpdateProductPriceResponse, error) {
	out := new(UpdateProductPriceResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/UpdateProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CheckoutProduct(ctx context.Context, in *CheckoutProductRequest, opts ...grpc.CallOption) (*CheckoutProductResponse, error) {
	out := new(CheckoutProductResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/CheckoutProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ReturnProduct(ctx context.Context, in *ReturnProductRequest, opts ...grpc.CallOption) (*ReturnProductResponse, error) {
	out := new(ReturnProductResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/ReturnProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	GetProductBySKU(context.Context, *GetProductBySKURequest) (*GetProductResponse, error)
	GetAllProducts(context.Context, *empty.Empty) (*GetAllProductsResponse, error)
	AddProductQuantity(context.Context, *AddProductQuantityRequest) (*AddProductQuantityResponse, error)
	UpdateProductPrice(context.Context, *UpdateProductPriceRequest) (*UpdateProductPriceResponse, error)
	CheckoutProduct(context.Context, *CheckoutProductRequest) (*CheckoutProductResponse, error)
	ReturnProduct(context.Context, *ReturnProductRequest) (*ReturnProductResponse, error)
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedCatalogServiceServer) GetProductBySKU(context.Context, *GetProductBySKURequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductBySKU not implemented")
}
func (UnimplementedCatalogServiceServer) GetAllProducts(context.Context, *empty.Empty) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedCatalogServiceServer) AddProductQuantity(context.Context, *AddProductQuantityRequest) (*AddProductQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductQuantity not implemented")
}
func (UnimplementedCatalogServiceServer) UpdateProductPrice(context.Context, *UpdateProductPriceRequest) (*UpdateProductPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductPrice not implemented")
}
func (UnimplementedCatalogServiceServer) CheckoutProduct(context.Context, *CheckoutProductRequest) (*CheckoutProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutProduct not implemented")
}
func (UnimplementedCatalogServiceServer) ReturnProduct(context.Context, *ReturnProductRequest) (*ReturnProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnProduct not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetProductBySKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductBySKURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetProductBySKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetProductBySKU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetProductBySKU(ctx, req.(*GetProductBySKURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetAllProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetAllProducts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_AddProductQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).AddProductQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/AddProductQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).AddProductQuantity(ctx, req.(*AddProductQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/UpdateProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateProductPrice(ctx, req.(*UpdateProductPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CheckoutProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CheckoutProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/CheckoutProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CheckoutProduct(ctx, req.(*CheckoutProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ReturnProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ReturnProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/ReturnProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ReturnProduct(ctx, req.(*ReturnProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _CatalogService_CreateProduct_Handler,
		},
		{
			MethodName: "GetProductBySKU",
			Handler:    _CatalogService_GetProductBySKU_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _CatalogService_GetAllProducts_Handler,
		},
		{
			MethodName: "AddProductQuantity",
			Handler:    _CatalogService_AddProductQuantity_Handler,
		},
		{
			MethodName: "UpdateProductPrice",
			Handler:    _CatalogService_UpdateProductPrice_Handler,
		},
		{
			MethodName: "CheckoutProduct",
			Handler:    _CatalogService_CheckoutProduct_Handler,
		},
		{
			MethodName: "ReturnProduct",
			Handler:    _CatalogService_ReturnProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
