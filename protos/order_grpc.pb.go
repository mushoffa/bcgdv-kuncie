// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error)
	GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*GetCartByIDResponse, error)
	GetAllCarts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllCartsResponse, error)
	AddOrderProduct(ctx context.Context, in *AddOrderProductRequest, opts ...grpc.CallOption) (*AddOrderProductResponse, error)
	CheckoutCart(ctx context.Context, in *CheckoutCartRequest, opts ...grpc.CallOption) (*CheckoutCartResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartResponse, error) {
	out := new(CreateCartResponse)
	err := c.cc.Invoke(ctx, "/OrderService/CreateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*GetCartByIDResponse, error) {
	out := new(GetCartByIDResponse)
	err := c.cc.Invoke(ctx, "/OrderService/GetCartByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllCarts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllCartsResponse, error) {
	out := new(GetAllCartsResponse)
	err := c.cc.Invoke(ctx, "/OrderService/GetAllCarts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddOrderProduct(ctx context.Context, in *AddOrderProductRequest, opts ...grpc.CallOption) (*AddOrderProductResponse, error) {
	out := new(AddOrderProductResponse)
	err := c.cc.Invoke(ctx, "/OrderService/AddOrderProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CheckoutCart(ctx context.Context, in *CheckoutCartRequest, opts ...grpc.CallOption) (*CheckoutCartResponse, error) {
	out := new(CheckoutCartResponse)
	err := c.cc.Invoke(ctx, "/OrderService/CheckoutCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error)
	GetCartByID(context.Context, *GetCartByIDRequest) (*GetCartByIDResponse, error)
	GetAllCarts(context.Context, *empty.Empty) (*GetAllCartsResponse, error)
	AddOrderProduct(context.Context, *AddOrderProductRequest) (*AddOrderProductResponse, error)
	CheckoutCart(context.Context, *CheckoutCartRequest) (*CheckoutCartResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreateCart(context.Context, *CreateCartRequest) (*CreateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedOrderServiceServer) GetCartByID(context.Context, *GetCartByIDRequest) (*GetCartByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByID not implemented")
}
func (UnimplementedOrderServiceServer) GetAllCarts(context.Context, *empty.Empty) (*GetAllCartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCarts not implemented")
}
func (UnimplementedOrderServiceServer) AddOrderProduct(context.Context, *AddOrderProductRequest) (*AddOrderProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderProduct not implemented")
}
func (UnimplementedOrderServiceServer) CheckoutCart(context.Context, *CheckoutCartRequest) (*CheckoutCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutCart not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/CreateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetCartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetCartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetCartByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetCartByID(ctx, req.(*GetCartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/GetAllCarts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllCarts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddOrderProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddOrderProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/AddOrderProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddOrderProduct(ctx, req.(*AddOrderProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CheckoutCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CheckoutCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderService/CheckoutCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CheckoutCart(ctx, req.(*CheckoutCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _OrderService_CreateCart_Handler,
		},
		{
			MethodName: "GetCartByID",
			Handler:    _OrderService_GetCartByID_Handler,
		},
		{
			MethodName: "GetAllCarts",
			Handler:    _OrderService_GetAllCarts_Handler,
		},
		{
			MethodName: "AddOrderProduct",
			Handler:    _OrderService_AddOrderProduct_Handler,
		},
		{
			MethodName: "CheckoutCart",
			Handler:    _OrderService_CheckoutCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
